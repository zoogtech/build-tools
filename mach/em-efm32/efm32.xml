<project name="Energy Micro ARM Cortex-M3 and Cortex-M0 family build script" basedir="." default="debug" xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">

    <property name="file.version.properties" value="${project}/version.properties" />
    <property file="${file.version.properties}" />

	<property file="${project}/project.properties" />

    <!-- Custom Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<import file="../../common.xml"/>

	<!-- System paths -->
	<property name="path.bin" value="${basedir}" />
	<property name="path.include" value="${path.bin}/inc" />
	<property name="path.library" value="${path.bin}/lib" />
	
	<property name="path.flash" value="${path.bin}/fls" />
	<property name="path.scripts" value="${path.bin}/scripts" />
	<property name="path.parameters" value="${path.bin}/par" />

	<!-- Recognized File Extensions -->
	<property name="ext.source" value="c" />
	<property name="ext.assembly" value="s" />
	<property name="ext.dependency" value="d" />
	<property name="ext.object" value="o" />
	<property name="ext.compiler.error" value="cer" />
	<property name="ext.assembler.error" value="aer" />
	<property name="ext.linker.error" value="ler" />
	<property name="ext.absolute" value="out" />
	<property name="ext.binary" value="bin" />
	<property name="ext.map" value="map" />

	<!-- Special Files -->
	<property name="path.sdk" value="${path.bin}/Sourcery_G++_Lite"/>
	<property name="compiler" value="arm-none-eabi-gcc" />
	<property name="assembler" value="arm-none-eabi-gcc" />
	<property name="linker" value="arm-none-eabi-gcc" />
	<property name="hexer" value="arm-none-eabi-objcopy" />

	<property name="compiler.options" value="-c -mcpu=cortex-m3 -mthumb -Wall -Werror -O0" />
	<property name="compiler.options.machine" value="-D" />
	<property name="compiler.options.include" value="-I" />
	<property name="compiler.options.debug" value="-g -DDEBUG" />
	<property name="compiler.options.dependency" value="-MMD -MP -MF" />
	<property name="compiler.options.output" value="-o" />

	<property name="assembler.options" value="-Ttext 0x0" />
	<property name="assembler.options.debug" value="-g" />
	<property name="assembler.options.include" value="-I" />
	<property name="assembler.options.output" value="-c -o" />

	<property name="linker.options" value="-mcpu=cortex-m3 -mthumb" />
	<property name="linker.options.map" value="-Xlinker -Map=" />
	<property name="linker.options.script" value="-T" />
	<property name="linker.options.library" value="-L" />
	<property name="linker.options.debug" value="" />
	<property name="linker.options.misc" value="" />
	<property name="linker.options.output" value="-o" />

	<!--
	************************************************************************
		Initialization Tasks
	************************************************************************
	-->

	<target name="cleanup">

		<!--Ensure that the bin directory is clean from any previous build-->
		<echo message="Cleaning up to ensure that the build directories are clean from any previous build." />

		<mkdir dir="${path.build}" />
		<delete failonerror="false">
			<fileset dir="${path.bin}" casesensitive="false">
				<include name="*.${ext.absolute}" />
				<include name="*.${ext.binary}" />
				<include name="*.${ext.map}" />
				<include name="*.${ext.header}" />
				<include name="*.${ext.source}" />
				<include name="*.${ext.assembly}" />
				<include name="*.${ext.raw.assembly}" />
				<include name="*.${ext.print}" />
				<include name="*.${ext.object}" />				
			</fileset>
			<fileset dir="${path.build}" casesensitive="false">
				<include name="**/*.${ext.absolute}" />
				<include name="**/*.${ext.binary}" />
				<include name="**/*.${ext.map}" />
				<include name="**/*.${ext.header}" />
				<include name="**/*.${ext.source}" />
				<include name="**/*.${ext.assembly}" />
				<include name="**/*.${ext.raw.assembly}" />
				<include name="**/*.${ext.print}" />
				<include name="**/*.${ext.object}" />
				<include name="*.${ext.compiler.error}" />
				<include name="*.${ext.linker.error}" />
			</fileset>
		</delete>

		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${path.build}" />
			<fileset dir="${path.debug}" />
			<fileset dir="${path.releases}/${dir.build}" />
		</delete>

		<echo message="Done!" />

	</target>

	<target name="cleanup-partial">

		<!--Ensure that the bin directory is clean from any previous build-->
		<echo message="Cleaning up to ensure that the build directories are clean from any previous build." />

		<mkdir dir="${path.build}" />
		<delete failonerror="false">
			<fileset dir="${path.bin}" casesensitive="false">
				<include name="*.${ext.absolute}" />
				<include name="*.${ext.binary}" />
				<include name="*.${ext.map}" />
			</fileset>
			<fileset dir="${path.build}" casesensitive="false">
				<include name="**/*.${ext.absolute}" />
				<include name="**/*.${ext.binary}" />
				<include name="**/*.${ext.map}" />
				<include name="*.${ext.linker.error}" />
			</fileset>
		</delete>

	</target>

	<!--
	********************************************************************************
		Module build tasks
	********************************************************************************
	-->
	<target name="buildmodules" depends="preparefiles">

		<echo message="${path.build}"/>

		<for param="module">

			<path>
				<dirset dir="${path.build}"/>
			</path>

			<sequential>

				<var name="path.module" value="@{module}" />

				<propertyregex override="yes" property="name.module" input="@{module}" regexp=".*[/\\]([^\.]*)" replace="\1" />

				<if>

					<and>
						<or>
							<equals arg1="${build.module}" arg2="" />
							<equals arg1="${build.module}" arg2="${name.module}" />
						</or>
						<not>
							<equals arg1="${path.module}" arg2="${path.build}" />
						</not>
					</and>
					<then>
						<echo message="Pre-compiling ${name.module}..."/>
						<antcall target="pre-compile" />
					</then>
				</if>

			</sequential>
		</for>

		<for param="module">

			<path>
				<dirset dir="${path.build}"/>
			</path>

			<sequential>

				<var name="path.module" value="@{module}" />

				<propertyregex override="yes" property="name.module" input="@{module}" regexp=".*[/\\]([^\.]*)" replace="\1" />

				<if>

					<and>
						<or>
							<equals arg1="${build.module}" arg2="" />
							<equals arg1="${build.module}" arg2="${name.module}" />
						</or>
						<not>
							<equals arg1="${path.module}" arg2="${path.build}" />
						</not>
					</and>
					<then>
						<echo message="Building ${name.module}..."/>
						<antcall target="buildmodule" />
					</then>
				</if>

			</sequential>
		</for>

	</target>

	<target name="buildmodule" depends="assemble" />

	<target name="compile" depends="">

		<echo message="***Compiling***" />
		<echo/>

		<sequential>
			<for param="file">

				<path>
					<fileset dir="${path.module}" includes="*.${ext.source}" />
				</path>

				<sequential>

					<propertyregex override="yes" property="file.name" input="@{file}" regexp=".*[/\\]([^\.]*).${ext.source}" replace="\1" />
					
					<echo message="Compiling ${file.name}.${ext.source}..." />
					
					<if>
						<equals arg1="${os.family.windows}" arg2="true"/>
						<then>
							<var name="error.output.pipe" value="2&gt;${path.build}/${file.name}.${ext.compiler.error}" />
						</then>
						<else>
							<var name="error.output.pipe" value="" />
						</else>
					</if>
					
					<exec dir="${path.sdk}/${os.family}/bin" executable="${compiler}" outputproperty="error.output" resultproperty="error.compiler" 
						resolveexecutable="${os.family.unix}" vmlauncher="${os.family.unix}" os="${os.name}">
						<arg line="${compiler.options}" />
						<arg line="${compiler.options.machine}${machine}" />
						<arg line="${compiler.options.include}${path.build}" />
						<arg line="${compiler.options.include}${path.config}" />
						<arg line="${compiler.options.include}${path.bootstrap}/${dir.header}" />
						<arg line="${compiler.options.include}${dir.kernel}" />
						<arg line="${compiler.options.include}${dir.kernel}/inc" />
						<arg line="${compiler.options.include}${path.build}/cmsis" />
						<arg line="${compiler.options.include}${path.build}/efm32-cmsis" />
						<arg line="${compiler.options.include}${path.build}/efm32-lib" />
						<arg line="${compiler.options.dependency} ${path.build}/${file.name}.${ext.dependency}" />
						<arg line="${compiler.options.debug}" />
						<arg line="${compiler.options.extra}" />
						<arg line="${compiler.options.output} ${path.build}/${file.name}.${ext.object}" />						
						<arg line="@{file}" />
						<arg line="${error.output.pipe}"/>
					</exec>

					<!-- Extract errors -->
					<echo message="${error.output}"/>
					<if>
						<equals arg1="${os.family.unix}" arg2="true"/>
						<then>
							<if>
								<not>
									<equals arg1="${error.output}" arg2=""/>
								</not>
								<then>
									<echo message="${error.output}${line.separator}" file="${path.build}/${file.name}.${ext.compiler.error}" />
								</then>
								<else>
									<delete file="${path.build}/${file.name}.${ext.compiler.error}" />
								</else>
							</if>
						</then>
					</if>

					<if>
						<equals arg1="${os.family.windows}" arg2="true"/>
						<then>
							<concat>
								<fileset dir="${path.build}" includes="${file.name}.${ext.compiler.error}"/>
							</concat>
						</then>
					</if>

					<var name="error.output" unset="true" />
					
				</sequential>
				
			</for>

			<move todir="${path.module}">
				<fileset dir="${path.bin}" casesensitive="false">
					<include name="*.${ext.assembly}" />
				</fileset>
			</move>

		</sequential>
	</target>

	<target name="assemble" depends="compile">

		<echo level="info" message="***Assembling***" />

		<sequential>

			<for param="file">

				<path>
					<fileset dir="${path.module}" includes="*.${ext.assembly}" />
				</path>

				<sequential>

					<propertyregex override="yes" property="file.name" input="@{file}" regexp=".*[/\\]([^\.]*).${ext.assembly}" replace="\1" />

					<echo level="info" message=" " />
					<echo message="Assembling ${file.name}.${ext.assembly}..." />

					<if>
						<equals arg1="${os.family.windows}" arg2="true"/>
						<then>
							<var name="error.output.pipe" value="2&gt;${path.build}/${file.name}.${ext.assembler.error}" />
						</then>
						<else>
							<var name="error.output.pipe" value="" />
						</else>
					</if>

					<exec dir="${path.sdk}/${os.family}/bin" executable="${assembler}" outputproperty="error.output" resultproperty="error.assembler" 
						resolveexecutable="${os.family.unix}" vmlauncher="${os.family.unix}" os="${os.name}">
						<arg line="${assembler.options}"/>
						<arg line="${assembler.options.include}${path.module}" />
						<arg line="${assembler.options.include}${path.build}" />
						<arg line="${assembler.options.include}${path.config}" />
						<arg line="${assembler.options.include}${path.bootstrap}/${dir.header}" />
						<arg line="${assembler.options.include}${dir.kernel}" />
						<arg line="${assembler.options.include}${dir.kernel}/inc" />
						<arg line="${assembler.options.include}${path.build}/cmsis" />
						<arg line="${assembler.options.include}${path.build}/efm32-cmsis" />
						<arg line="${assembler.options.include}${path.build}/efm32-lib" />
						<arg line="${assembler.options.debug}"/>
						<arg line="${assembler.options.output} ${path.build}/${file.name}.${ext.object}"/>
						<arg line="${path.module}/${file.name}.${ext.assembly}" />
						<arg line="${error.output.pipe}"/>
					</exec>

					<!-- Extract errors -->
					<echo message="${error.output}"/>
					<if>
						<equals arg1="${os.family.unix}" arg2="true"/>
						<then>
							<if>
								<not>
									<equals arg1="${error.output}" arg2=""/>
								</not>
								<then>
									<echo message="${error.output}${line.separator}" file="${path.build}/${file.name}.${ext.assembler.error}" />
								</then>
								<else>
									<delete file="${path.build}/${file.name}.${ext.assembler.error}" />
								</else>
							</if>
						</then>
					</if>

					<if>
						<equals arg1="${os.family.windows}" arg2="true"/>
						<then>
							<concat>
								<fileset dir="${path.build}" includes="${file.name}.${ext.assembler.error}"/>
							</concat>
						</then>
					</if>

					<var name="error.output" unset="true" />

				</sequential>
			</for>

		</sequential>

	</target>

	<!--
	********************************************************************************
	    Project build tasks
	********************************************************************************
	-->

	<target name="link" depends="buildmodules">
		
		<sequential>

			<echo level="info" message="Generating object file list..." />

			<fileset id="fileset.obj1" dir="${path.build}" includes="*.${ext.object}" />
			<fileset id="fileset.obj2" dir="${dir.kernel}" includes="*.${ext.object}" />
			<fileset id="fileset.obj3" dir="${dir.kernel}/obj" includes="*.${ext.object}" />
			<pathconvert pathsep=" " property="files.obj1" refid="fileset.obj1"/>
			<pathconvert pathsep=" " property="files.obj2" refid="fileset.obj2"/>
			<pathconvert pathsep=" " property="files.obj3" refid="fileset.obj3"/>
			<var name="filelist" value="${files.obj1} ${files.obj2} ${files.obj3}" />			
			<echo level="verbose" message="${filelist}"/>

			<filter token="objfilelist" value="${filelist}"/>
			<copy file="${path.bin}/scripts/${model}.ld"
				  tofile="${path.build}/start-${machine.manufacturer}-${machine.family}/${model}.ld.tmp"
				  overwrite="true"
				  filtering="true">
			</copy>
			
			<echo message="" />
			<echo message="Scanning libraries..." />

			<echo message="" />
			<echo message="Linking..." />

			<exec dir="${path.sdk}/${os.family}/bin" executable="${linker}" outputproperty="error.output" resultproperty="error.linker" 
				resolveexecutable="${os.family.unix}" vmlauncher="${os.family.unix}" os="${os.name}">
				<arg line="${linker.options}" />
				<arg line="${linker.options.map}${path.build}/${file.build}.${ext.map}" />
				<arg line="${linker.options.script}${path.build}/start-${machine.manufacturer}-${machine.family}/${model}.ld.tmp" />
				<arg line="${linker.options.library}&quot;${path.sdk}/${os.family}/arm-none-eabi/lib/thumb2&quot;" />
				<arg line="${linker.options.library}&quot;${path.sdk}/${os.family}/lib/gcc/arm-none-eabi/4.4.1/thumb2&quot;" />
				<arg line="${linker.options.misc}" />
				<arg line="${linker.options.extra}" />
				<arg line="${linker.options.output} ${path.build}/${file.build}.${ext.absolute}" />
			</exec>

			<echo message="${error.output}" />
			<if>
				<equals arg1="${error.linker}" arg2="1" />
				<then>
					<echo message="${error.output}${line.separator}" file="${path.build}/${file.build}.${ext.linker.error}"/>
				</then>
			</if>
			
			<available file="${path.build}/${file.build}.${ext.absolute}" property="file.absolute.present" />
			
			<echo message="" />
			<echo message="Creating binary file ..." />
	
			<if>
				<equals arg1="${file.absolute.present}" arg2="true"/>
				<then>
					<exec dir="${path.sdk}/${os.family}/bin" executable="${hexer}"
						resolveexecutable="${os.family.unix}" vmlauncher="${os.family.unix}" os="${os.name}">
						<arg line="-O binary ${path.build}/${file.build}.${ext.absolute}"/>
						<arg line="${path.build}/${file.build}.${ext.binary}" />
					</exec>
				</then>
				<else>
					<echo message="---${path.build}/${file.build}.${ext.absolute} not found---" />
				</else>
			</if>
		
			<echo message="" />
			<echo message="Creating the download script file ..." />
		
			<filter token="machine" value="${machine}"/>
			<filter token="binaryfile" value="${path.build}/${file.build}.${ext.binary}"/>
			<copy file="${path.bin}/scripts/download.jlink"
				  tofile="${path.build}/download.jlink"
				  overwrite="true"
				  filtering="true">
			</copy>
		
		</sequential>

	</target>

	<target name="housekeeping">

		<echo level="info" message="Performing housekeeping..." />

		<delete file="${path.build}/${file.build}.${ext.compiler.error}.all"/>
		<concat destfile="${path.build}/${file.build}.${ext.compiler.error}.all">
			<fileset dir="${path.build}" includes="*.${ext.compiler.error}"/>
			<fileset dir="${path.build}" includes="*.${ext.assembler.error}"/>
		</concat>

		<loadfile property="file.compiler.error" quiet="true" srcFile="${path.build}/${file.build}.${ext.compiler.error}.all"/>

		<echo level="info" message=" " />
		<echo level="info" message="***Compiler/Assembler Errors***" />

		<if>
			<or>
				<equals arg1="${file.compiler.error}" arg2="" />
				<equals arg1="${file.compiler.error}" arg2="$${file.compiler.error}" />
			</or>
			<then>
				<echo level="info" message="---NONE---" />
			</then>
			<else>
				<var name="error.compiler" value="1"/>
				<echo level="info" message="${file.compiler.error}" />
			</else>
		</if>

		<echo level="info" message="******"/>

		<echo level="info" message=" "/>
		<echo level="info" message="***Linker Errors***"/>

		<available file="${path.build}/${file.build}.${ext.linker.error}" property="file.linker.error" />
		
		<if>
			<equals arg1="${file.linker.error}" arg2="true" />
			<then>
				<loadfile property="error.linker.out" srcFile="${path.build}/${file.build}.${ext.linker.error}"/>				
				<echo message="${error.linker.out}" />
				<var name="error.linker" value="1"/>
			</then>
			<else>
				<echo level="info" message="---NONE---" />
			</else>
		</if>

		<echo level="info" message="******"/>

		<echo level="info" message=" "/>
		<echo level="info" message="***Section sizes***"/>

		<available file="${path.build}/${file.build}.${ext.map}" property="file.map" />
		
		<if>
			<equals arg1="${file.map}" arg2="true" />
			<then>
				<loadfile srcfile="${path.build}/${file.build}.${ext.map}" property="section.ram">
				  <filterchain>
					<linecontainsregexp>
						<regexp pattern="\b__sizeof_RAM\b"/>
					</linecontainsregexp>
				  </filterchain>
				</loadfile>
				
				<loadfile srcfile="${path.build}/${file.build}.${ext.map}" property="section.rom">
				  <filterchain>
					<linecontainsregexp>
						<regexp pattern="\b__sizeof_ROM\b"/>
					</linecontainsregexp>
				  </filterchain>
				</loadfile>

				<echo level="info" message="${section.ram}" />
				<echo level="info" message="${section.rom}" />
				
			</then>
			<else>
				<echo level="info" message="---NOT AVAILABLE---" />
			</else>
		</if>
		
		<echo level="info" message="******"/>
		
	</target>

	<target name="build" depends="housekeeping">

		<available file="${path.build}/${file.build}.${ext.binary}" property="file.binary.present" />
		
		<if>
			<equals arg1="${error.compiler}" arg2="1" />
			<then>
				<fail message="Compiler errors found!" />
			</then>
			<else>
				
				<if>
					<equals arg1="${error.linker}" arg2="1" />
					<then>
						<fail message="Linker errors found!" />
					</then>
					<else>

						<if>
							<equals arg1="${file.binary.present}" arg2="false" />
							<then>
								<fail message="Binary file not found" />
							</then>
						</if>

					</else>
				</if>
			</else>
		</if>

	</target>

</project>

